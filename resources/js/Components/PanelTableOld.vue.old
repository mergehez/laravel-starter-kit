<!--<script setup lang="ts" generic="TModel extends TModelWithTitle">-->

<!--import {vAutoAnimate} from "@formkit/auto-animate";-->
<!--import {computed, ref} from "vue";-->
<!--import {router} from "@inertiajs/vue3";-->
<!--import {twMerge} from "tailwind-merge";-->
<!--import {TModelWithTitle} from "@/utils/models";-->
<!--import {search} from "@/utils/utils";-->
<!--import {api} from "@/utils/api_helpers";-->
<!--import {showNotification, showNotificationFromAxiosError} from "@/Components/Overlays/notif_toast_helpers";-->
<!--import {__} from "@/utils/localization";-->
<!--import {openConfirmationDialog} from "@/Components/Overlays/confirm_modal_helpers";-->
<!--import SearchInput from "@/Components/SearchInput.vue";-->
<!--import {dt} from "@/utils/date_helpers";-->
<!--import IHead from "@/Components/IHead.vue";-->
<!--import InertiaRefreshButton from "@/Components/InertiaRefreshButton.vue";-->
<!--import {TGenericFormState} from "@/utils/form_helpers";-->
<!--import Button from "@/Components/Button.vue";-->
<!--import globalState, {loc} from "@/utils/globalState";-->

<!--export type PanelSlotData<T extends TModelWithTitle> = {-->
<!--    item: T,-->
<!--    editForm: TGenericFormState['form'],-->
<!--}-->

<!--const props = defineProps<{-->
<!--    title: string,-->
<!--    items: TModel[],-->
<!--    routeGroup: string,-->
<!--    overflowAuto?: boolean,-->
<!--    sequenced?: boolean,-->
<!--    inline?: boolean,-->
<!--    hideCreateButton?: boolean,-->
<!--    hideLastModified?: boolean,-->
<!--    editsInline?: boolean,-->
<!--    hideSearch?: boolean,-->
<!--    twoCols?: boolean,-->
<!--    headClass?: string,-->
<!--    refreshButton?: boolean,-->
<!--    orderBy?: (a: TModel, b: TModel) => number,-->
<!--    createFormCreator?: () => TGenericFormState,-->
<!--    editFormCreator?: (item: TModel) => TGenericFormState,-->
<!--    canBeDeleted?: (item: TModel) => boolean,-->
<!--    askToDelete?: (item: TModel) => void,-->
<!--    askToDeleteTitle?: (item: TModel) => string,-->
<!--}>()-->

<!--const emit = defineEmits<{-->
<!--    addNew: [],-->
<!--    // askToDelete: [TModel],-->
<!--    edit: [TModel],-->
<!--    // inlineSave: [TModelFormHelpers<TModel>],-->
<!--}>();-->

<!--const query = defineModel<string>('query', {-->
<!--    default: '',-->
<!--})-->

<!--function getTitle(item: TModel, or?: string) {-->
<!--    const val = item.title ?? item.name;-->
<!--    if(val && typeof val === 'object')-->
<!--        return val[loc.value];-->

<!--    return val || or || '';-->
<!--}-->

<!--const filteredItems = computed(() => {-->
<!--    const res = query.value-->
<!--        ? props.items.filter(i => search(getTitle(i), query.value))-->
<!--        : props.items;-->

<!--    if (props.orderBy) {-->
<!--        return res.toSorted(props.orderBy)-->
<!--    }-->

<!--    return res;-->
<!--});-->

<!--function changeSequence(p: TModel, direction: 'up' | 'down') {-->
<!--    const index = props.items.indexOf(p);-->
<!--    const otherIndex = direction === 'up' ? index - 1 : index + 1;-->
<!--    const other = props.items[otherIndex];-->
<!--    api.put(route(`api.${props.routeGroup}.swap-sequence`, {id1: p.id, id2: other.id}))-->
<!--        .then(() => {-->
<!--            router.reload({only: ['pageData']})-->
<!--        })-->
<!--        .catch((e) => {-->
<!--            if (e.message == 'CSRF token mismatch.') {-->
<!--                showNotification("please_reload_page_and_try_again", 'danger');-->
<!--                return;-->
<!--            }-->
<!--            showNotification(__('something_went_wrong'), 'danger');-->
<!--        })-->
<!--}-->

<!--const toEdit = ref<TGenericFormState>();-->

<!--function onEditClicked(item: TModel) {-->
<!--    // console.log(toEdit.value)-->
<!--    if (props.editFormCreator) {-->
<!--        if (toEdit.value?.form.id === item.id) {-->
<!--            toEdit.value = undefined;-->
<!--            return;-->
<!--        }-->
<!--        toEdit.value = {-->
<!--            ...props.editFormCreator(item) as any,-->
<!--            id: item.id,-->
<!--        };-->
<!--    } else {-->
<!--        emit('edit', item);-->
<!--    }-->
<!--}-->

<!--async function submitInlineEdit() {-->
<!--    if (toEdit.value) {-->
<!--        if (await toEdit.value.submit()) {-->
<!--            toEdit.value = undefined;-->
<!--        }-->
<!--    }-->
<!--}-->

<!--const isEditingInline = (item: TModel) => props.editsInline && !!toEdit.value && toEdit.value.form.id === item.id;-->
<!--const getEditingForm = (item: TModel) => !!toEdit.value && toEdit.value.form.id === item.id ? toEdit.value!.form : undefined;-->

<!--const toCreate = ref(undefined as TGenericFormState | undefined);-->

<!--function onCreateClicked() {-->
<!--    if (props.createFormCreator) {-->
<!--        if (toCreate.value) {-->
<!--            toCreate.value = undefined;-->
<!--            return;-->
<!--        }-->
<!--        toCreate.value = {-->
<!--            ...props.createFormCreator() as any,-->
<!--        };-->
<!--    } else {-->
<!--        emit('addNew');-->
<!--    }-->
<!--}-->

<!--function askToDelete(p: TModel) {-->
<!--    if (props.askToDelete) {-->
<!--        props.askToDelete(p);-->
<!--        return;-->
<!--    }-->

<!--    router.reload({-->
<!--        only: ['info'],-->
<!--        onSuccess: () => {-->
<!--            if (props.canBeDeleted?.(p) === false) {-->
<!--                return;-->
<!--            }-->
<!--            const title = props.askToDeleteTitle?.(p) ?? getTitle(p);-->
<!--            openConfirmationDialog({-->
<!--                message: `<b>${title}</b><br/>` + __('delete_confirm_message'),-->
<!--                onConfirm: () => {-->
<!--                    api.delete(route(`api.${props.routeGroup}.destroy`, p.id))-->
<!--                        .then(() => router.reload())-->
<!--                        .catch(showNotificationFromAxiosError)-->
<!--                }-->
<!--            })-->
<!--        }-->
<!--    })-->
<!--}-->
<!--</script>-->

<!--<template>-->
<!--    <div class="flex flex-col h-full w-full" :class="overflowAuto ? 'overflow-y-auto' : ''" v-auto-animate>-->
<!--        <IHead :title="title"/>-->

<!--        <div :class="twMerge('flex items-center gap-3 py-2 px-3', headClass)">-->
<!--            <slot name="title">-->
<!--                <h1 class="font-bold text-2xl py-1">{{ title }}</h1>-->
<!--            </slot>-->

<!--            <Button-->
<!--                v-if="!hideCreateButton"-->
<!--                small-->
<!--                severity="secondary"-->
<!--                @click.prevent="onCreateClicked">-->
<!--                <span class="icon icon-[mdi&#45;&#45;plus-bold]"></span>-->
<!--                {{ __('create') }}-->
<!--            </Button>-->

<!--            <InertiaRefreshButton v-if="refreshButton"/>-->

<!--            <i class="flex-1"></i>-->

<!--            <SearchInput v-model="query" v-if="!hideSearch"/>-->
<!--        </div>-->

<!--        <template v-if="toCreate">-->
<!--            <div class="w-full text-sm px-2">-->
<!--                <div class="bg-x3 p-3 rounded">-->
<!--                    <slot name="form" :data="toCreate!" :cancel="() => toCreate = undefined"></slot>-->
<!--                </div>-->
<!--            </div>-->
<!--        </template>-->

<!--        <div class="opacity-50 hover:opacity-100 transition-opacity duration-200 w-full">-->
<!--            <slot name="head"></slot>-->
<!--        </div>-->

<!--        <div class="flex-1 w-full grid auto-rows-min"-->
<!--             :class="{-->
<!--                 'overflow-y-auto': overflowAuto,-->
<!--                 'grid-cols-2 gap-x-px border-b border-x3': twoCols,-->
<!--             }"-->
<!--             style="scrollbar-gutter: stable"-->
<!--        >-->
<!--            <template v-for="(item, i) in filteredItems" :key="item.id">-->
<!--                <div-->
<!--                    class="hover:bg-x2 text-sm flex items-center w-full"-->
<!--                    :class="{-->
<!--                        'pr-3': inline,-->
<!--                        'even:bg-x1': !twoCols,-->
<!--                        'border-t border-x border-x3': twoCols,-->
<!--                        'bg-x1': twoCols && i % 4 > 1,-->
<!--                        '!bg-x2': isEditingInline(item),-->
<!--                    }"-->
<!--                >-->
<!--                    &lt;!&ndash;:class="inline ? 'pr-3' : ''"&ndash;&gt;-->
<!--                    <slot name="cols-start" :item="item" :editForm="getEditingForm(item)"></slot>-->

<!--                    <slot name="title-cell" :item="item" :editForm="getEditingForm(item)">-->
<!--                        <div class="rounded-none py-2 leading-tight w-full flex items-center text-left px-3 flex-1"-->
<!--                             :class="!item.title && !item.name ? 'italic opacity-70' : ''"-->
<!--                        >-->
<!--                            <slot name="title-cell-content" :item="item" :editForm="getEditingForm(item)">-->
<!--                                {{ getTitle(item, __('no_title') + '...') }}-->
<!--                            </slot>-->
<!--                        </div>-->
<!--                    </slot>-->

<!--                    <slot name="cols-between" :item="item" :editForm="getEditingForm(item)"></slot>-->

<!--                    <div v-if="!hideLastModified && !isEditingInline(item)" class="whitespace-nowrap">-->
<!--                        <div class="px-3" style="width: 170px">-->
<!--                            {{ dt.toString(item.updated_at) }}-->
<!--                        </div>-->
<!--                    </div>-->
<!--                    <div class="whitespace-nowrap">-->
<!--                        <div class="flex gap-2 py-1 pl-3 items-center" :class="inline ? '': 'px-3'">-->
<!--                            <template v-if="sequenced">-->
<!--                                <Button-->
<!--                                    severity="secondary" small-->
<!--                                    title="change sequence up"-->
<!--                                    class="bg-opacity-80 p-1"-->
<!--                                    :class="{ '!opacity-25': i == 0 || !!toEdit }"-->
<!--                                    :disabled="i == 0 || !!toEdit"-->
<!--                                    @click.prevent="changeSequence(item as TModel, 'up')"-->
<!--                                >-->
<!--                                    <span class="icon icon-[mdi&#45;&#45;arrow-up] text-base text-reverse"></span>-->
<!--                                </Button>-->
<!--                                <Button-->
<!--                                    severity="secondary" small-->
<!--                                    title="change sequence down"-->
<!--                                    class="bg-opacity-80 p-1"-->
<!--                                    :class="{ '!opacity-25': i == items.length - 1 || !!toEdit }"-->
<!--                                    :disabled="i == items.length - 1 || !!toEdit"-->
<!--                                    @click.prevent="changeSequence(item as TModel, 'down')"-->
<!--                                >-->
<!--                                    <span class="icon icon-[mdi&#45;&#45;arrow-down] text-base text-reverse"></span>-->
<!--                                </Button>-->
<!--                            </template>-->

<!--                            <slot name="buttons" :item="item" :index="i" :editForm="getEditingForm(item)"></slot>-->

<!--                            <template v-if="!editsInline || !isEditingInline(item)">-->
<!--                                <Button-->
<!--                                    severity="info" small-->
<!--                                    class="bg-opacity-80 p-1"-->
<!--                                    title="full edit"-->
<!--                                    @click.prevent="onEditClicked(item as TModel)">-->
<!--                                    <span class="icon icon-[mingcute&#45;&#45;edit-2-fill] text-base"></span>-->
<!--                                </Button>-->
<!--                                <Button-->
<!--                                    severity="danger" small-->
<!--                                    class="bg-opacity-80 p-1"-->
<!--                                    title="delete"-->
<!--                                    @click.prevent="askToDelete(item)">-->
<!--                                    <span v-if="'deleted_at' in item && item.deleted_at" class="icon icon-[mdi&#45;&#45;delete-forever] text-lg"></span>-->
<!--                                    <span v-else class="icon icon-[mdi&#45;&#45;delete] text-base"></span>-->
<!--                                </Button>-->
<!--                            </template>-->
<!--                            <template v-else>-->
<!--                                <Button-->
<!--                                    severity="success" small-->
<!--                                    class="bg-opacity-80 p-1"-->
<!--                                    title="save"-->
<!--                                    @click.prevent="submitInlineEdit">-->
<!--                                    <span class="icon icon-[mdi&#45;&#45;content-save] text-base"></span>-->
<!--                                </Button>-->
<!--                                <Button-->
<!--                                    severity="secondary" small-->
<!--                                    class="p-1"-->
<!--                                    title="cancel"-->
<!--                                    @click.prevent="toEdit = undefined">-->
<!--                                    <span class="icon icon-[mdi&#45;&#45;close] text-base"></span>-->
<!--                                </Button>-->
<!--                            </template>-->
<!--                        </div>-->
<!--                    </div>-->
<!--                </div>-->

<!--                <template v-if="!editsInline && (item.id == toEdit?.form.id)">-->
<!--                    <div class="w-full text-sm px-2">-->
<!--                        <div class="bg-x3 p-3 rounded">-->
<!--                            <slot name="form" :data="toEdit" :cancel="() => toEdit = undefined"></slot>-->
<!--                        </div>-->
<!--                    </div>-->
<!--                </template>-->
<!--            </template>-->
<!--        </div>-->
<!--    </div>-->
<!--</template>-->